{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This guide outlines our prefered ways of making. It connects our practices with our values. It provides clarity and direction. It should be energizing and helpful, not constricting. This style is our current thinking on how to do things right and make things better. It is always evolving. This is an effort to find the right questions to ask. Then identify what are the possible answers to those questions. From there were can sketch guidelines that will protect developer autonomy and project uniqueness, while also giving guide posts to facilitate work as a team. Static - as end of dev period Assets","title":"Home"},{"location":"analytics%20/","text":"Analytics all projects should have Google Analytics ids project partners should have access to GA dashboard we should periodically review what data has relevance for grants, departments and other stakeholders","title":"Analytics"},{"location":"analytics%20/#analytics","text":"all projects should have Google Analytics ids project partners should have access to GA dashboard we should periodically review what data has relevance for grants, departments and other stakeholders","title":"Analytics"},{"location":"assets/","text":"Assets Assets are files that are part of a project. This could be image or video files. It might be data in a CSV or JSON. An asset is not content. Box download_url = client.file(file_id).get_download_url() https://www.isc.upenn.edu/security/data-box-amazon#Confidential-University-Data Current box storage limit is TBD Dependent on University affiliation, deleted with email (bad for term-faculty, adjuncts, students that move) DO Spaces $5 per month, 250GiB","title":"Assets"},{"location":"assets/#assets","text":"Assets are files that are part of a project. This could be image or video files. It might be data in a CSV or JSON. An asset is not content.","title":"Assets"},{"location":"assets/#box","text":"download_url = client.file(file_id).get_download_url() https://www.isc.upenn.edu/security/data-box-amazon#Confidential-University-Data Current box storage limit is TBD Dependent on University affiliation, deleted with email (bad for term-faculty, adjuncts, students that move)","title":"Box"},{"location":"assets/#do-spaces","text":"$5 per month, 250GiB","title":"DO Spaces"},{"location":"deployment/","text":"Deployment Many workflows currently trigger GitHub Actions and Pages deployment on every commit. While the build doesn't take long, Pages can take a few minutes to transfer assets and deploy them. What if a project runs builds locally and deploys to DO with Fabric. This removes the dependency on Microsoft cloud services as anything more than a code repository. Netlify CMS may compicate this. Netlify (service dependent, teaching platform-specific products) quick domain and certs, CDN, CMS, forms, CLI, atomic deploys, global CDN/deploys AWS, dependent on external infrastructure, costs can change Digital Ocean (service independent, teaching core tech) local, simple, OS control and maintenance, single region, simple, fixed costs need to update os, certs, maintain at least one droplet for static sites","title":"Deployment"},{"location":"deployment/#deployment","text":"Many workflows currently trigger GitHub Actions and Pages deployment on every commit. While the build doesn't take long, Pages can take a few minutes to transfer assets and deploy them. What if a project runs builds locally and deploys to DO with Fabric. This removes the dependency on Microsoft cloud services as anything more than a code repository. Netlify CMS may compicate this. Netlify (service dependent, teaching platform-specific products) quick domain and certs, CDN, CMS, forms, CLI, atomic deploys, global CDN/deploys AWS, dependent on external infrastructure, costs can change Digital Ocean (service independent, teaching core tech) local, simple, OS control and maintenance, single region, simple, fixed costs need to update os, certs, maintain at least one droplet for static sites","title":"Deployment"},{"location":"design/","text":"design principles data is our alpha and omega make modular over integrated systems static sites break less microservices over apps design for re-use, not one-time solutions always try something new in a project ownership, if the lights go out, have the switch to turn them back on avoid single points of failure \"The Hedgehog and the fox\" There once were two forest animals who lived two very different lives. The hedgehog lived a very consistent life. He knew precisely where to forage for food and how best to keep it safe. He'd go back year after year. He did things the same way because it made life predictable and secure. He knew one thing, and he knew it better than anyone else. Because of this way of being, the hedgehog had time to explore other interests and made small improvements to his routine over the years, and he never felt uncertain or afraid that he'd have no food. He was also incredibly dull. The fox was a very different creature. She dashed into the farm to steal eggs from the chickens. The next moment she'd be knawing on berries in a glade. She lived in the moment and was free to go where she pleased. Each day brought unexpected challenges and puzzles. She was always up to something new and in novel ways. But she had to start from scratch, and most often things didn't work out the way she'd planned. One day, a young owl fell out of its nest. It sat on the ground, watching the other animals. The hedgehog and the fox caught its attention because they lived such different lives. One was drearily consistent but reliable. The other was clever and fast, but nervous things wouldn't work out. The owl wanted to be something in between. It wanted the best of both sides while avoiding all the problems. The hedgehog just did one thing. So the owl decided, \"I'm never going to get stuck doing things one way or another, no matter how confident and secure I might feel.\" But \"I have to know some things better than others. I can't just dash about pretending that I can do anything and hope things just will work out.\" Having overheard the owls declarations, the fox asked, \"Really?! That's a poor compromise.\" She continued, \"You'd just be a hedgehog who does two things rather than just one.\" \"What you need most,\" she said right to the owl's face, \"is to be nimble, feisty, and hungry. That's the only way you'll stay alive in these fast-changing times. You'll never be able to keep up if you settle on one or two things.\" The hedgehog had been listening from the mouth of his burrow. Now he had to object. \"Oh, come on,\" he said, \"you sound like a kid at the fair. Nothing's better just because it's new. Before long, there'll be some new kind of thing.\" \"You are, as always, incredibly dull and irritating,\" replied the fox. It was getting dark, and the owl needed to return to the nest. Neither the fox nor the hedgehog was going to make things any better. Their characters were perfectly at odds. As the owl stared up at the tree, the leaves rustled. A few fell to the ground just like they had. \"Perhaps I can learn from the seasons,\" thought the owl. There are different times of day and times of the year. Time can resolve my paradox. For the fox is most at home when the weather is clear. She darts around and enjoys the start of the year. But the hedgehog is warm and content in the dark. He ends the year with a full belly. So while I am young, thought the owl, I will be many things. I will howl at the stars and make mischief. Once I have proven myself and am viable, I can develop, burrow, and make a stable home for the winter. And when I am cold and gone, I can easily soar into the sunset. The owl thought about all these things and decided that all of this would make for an excellent project development strategy. But that, my friend, is another story.","title":"design principles"},{"location":"design/#design-principles","text":"data is our alpha and omega make modular over integrated systems static sites break less microservices over apps design for re-use, not one-time solutions always try something new in a project ownership, if the lights go out, have the switch to turn them back on avoid single points of failure \"The Hedgehog and the fox\" There once were two forest animals who lived two very different lives. The hedgehog lived a very consistent life. He knew precisely where to forage for food and how best to keep it safe. He'd go back year after year. He did things the same way because it made life predictable and secure. He knew one thing, and he knew it better than anyone else. Because of this way of being, the hedgehog had time to explore other interests and made small improvements to his routine over the years, and he never felt uncertain or afraid that he'd have no food. He was also incredibly dull. The fox was a very different creature. She dashed into the farm to steal eggs from the chickens. The next moment she'd be knawing on berries in a glade. She lived in the moment and was free to go where she pleased. Each day brought unexpected challenges and puzzles. She was always up to something new and in novel ways. But she had to start from scratch, and most often things didn't work out the way she'd planned. One day, a young owl fell out of its nest. It sat on the ground, watching the other animals. The hedgehog and the fox caught its attention because they lived such different lives. One was drearily consistent but reliable. The other was clever and fast, but nervous things wouldn't work out. The owl wanted to be something in between. It wanted the best of both sides while avoiding all the problems. The hedgehog just did one thing. So the owl decided, \"I'm never going to get stuck doing things one way or another, no matter how confident and secure I might feel.\" But \"I have to know some things better than others. I can't just dash about pretending that I can do anything and hope things just will work out.\" Having overheard the owls declarations, the fox asked, \"Really?! That's a poor compromise.\" She continued, \"You'd just be a hedgehog who does two things rather than just one.\" \"What you need most,\" she said right to the owl's face, \"is to be nimble, feisty, and hungry. That's the only way you'll stay alive in these fast-changing times. You'll never be able to keep up if you settle on one or two things.\" The hedgehog had been listening from the mouth of his burrow. Now he had to object. \"Oh, come on,\" he said, \"you sound like a kid at the fair. Nothing's better just because it's new. Before long, there'll be some new kind of thing.\" \"You are, as always, incredibly dull and irritating,\" replied the fox. It was getting dark, and the owl needed to return to the nest. Neither the fox nor the hedgehog was going to make things any better. Their characters were perfectly at odds. As the owl stared up at the tree, the leaves rustled. A few fell to the ground just like they had. \"Perhaps I can learn from the seasons,\" thought the owl. There are different times of day and times of the year. Time can resolve my paradox. For the fox is most at home when the weather is clear. She darts around and enjoys the start of the year. But the hedgehog is warm and content in the dark. He ends the year with a full belly. So while I am young, thought the owl, I will be many things. I will howl at the stars and make mischief. Once I have proven myself and am viable, I can develop, burrow, and make a stable home for the winter. And when I am cold and gone, I can easily soar into the sunset. The owl thought about all these things and decided that all of this would make for an excellent project development strategy. But that, my friend, is another story.","title":"design principles"},{"location":"development/","text":"The Film Student and the Major Hollywood Movie Studio","title":"The Film Student and the Major Hollywood Movie Studio"},{"location":"development/#the-film-student-and-the-major-hollywood-movie-studio","text":"","title":"The Film Student and the Major Hollywood Movie Studio"},{"location":"digital-editions/","text":"Minimal Editions Workflow This section details our minimal workflow for creating digital editions. Texts and text layers are transformed into static HTML and TEI. Content creation and editing will utilize tools that are familiar and intuitive to our participants. Using natural language processing, the annotations will match their corresponding text in the original Greek and our translations. There are no existing themes for Jekyll or other static site generators designed for the side-by-side presentation of texts, translations, and variants. The templates created for this project can be reused in similar scholarly publications. Content creation, editing, and review Content pre-planning. Establish what content is needed for the project. This includes translations, commentaries, and types of annotations. Each item is listed in a Google Sheet with title, author, current status, link to Doc, and other relevant fields such as deadlines. This can be updated and changed as needed. A filename standard is created to order individual pages (About, Introduction\u2026) and to relate texts (First Alcibiades) with text layers (Original, Translation, Simplified Translation\u2026) For example, 004-Alcibiades-Greek-Original, 005-Alcibiades-Translation-Jowett. This system should allow for the addition of new texts and text layers over time. Team members use Google Docs for writing, commenting, and editing project content. Translations can also be authored and reviewed in Docs. When ready, the Document is marked for export on the Sheet. Datafication of project content Documents are exported from Drive as HTML using the Drive API. Using HTML retains formatting and layout. The HTML files are processed to remove the Drive style block and classes (bs4). from bs4 import BeautifulSoup from pathlib import Path html = Path('minimal_editions_workflow.html') soup = BeautifulSoup(html.read_bytes(), \"html.parser\") # remove the Drive style block in <head> soup.head.style.decompose() # for each element, remove the Drive class attributes for tag in soup(): for attribute in [\"class\"]: del tag[attribute] html.write_text(str(soup)) Cleaned HTML files are pushed to a GitHub repository. HTML can be programmatically annotated using a standoff converter; see: https://so.davidlassner.com/ Use the standoff converter with Ancient Greek BERT to mark clause boundaries and to assign span ids in the HTML( text ). This will make it possible to connect spans in translations to similar spans in the originals. We can also add part of speech and morphological analysis data if desired. Commentary can be connected to any span in the HTML (word, phrase, punctuation mark). We could create an application to List the files in the GitHub repository Fetch the HTML and display it in an interface (CKeditor works well with HTML) Allow highlighting of text and addition of commentary Editing and removal of existing annotations Edit the text (given reviewer feedback or other input) Push the updated HTML back to the repository 3. Publishing Workshop on user experience and site design. Create wireframes and craft website design. From site design, create templates and interface for multi-layer texts. For parallel texts to scroll together, we\u2019ll need to listen for scroll and move both columns of text at the same time. On hover of spans will also need to get elements by id to highlight and display commentary in visible text layers. Use build script to gather the HTML files and create a static site folder. Files can also be converted to TEI for preservation and sharing","title":"Digital editions"},{"location":"digital-editions/#minimal-editions-workflow","text":"This section details our minimal workflow for creating digital editions. Texts and text layers are transformed into static HTML and TEI. Content creation and editing will utilize tools that are familiar and intuitive to our participants. Using natural language processing, the annotations will match their corresponding text in the original Greek and our translations. There are no existing themes for Jekyll or other static site generators designed for the side-by-side presentation of texts, translations, and variants. The templates created for this project can be reused in similar scholarly publications. Content creation, editing, and review Content pre-planning. Establish what content is needed for the project. This includes translations, commentaries, and types of annotations. Each item is listed in a Google Sheet with title, author, current status, link to Doc, and other relevant fields such as deadlines. This can be updated and changed as needed. A filename standard is created to order individual pages (About, Introduction\u2026) and to relate texts (First Alcibiades) with text layers (Original, Translation, Simplified Translation\u2026) For example, 004-Alcibiades-Greek-Original, 005-Alcibiades-Translation-Jowett. This system should allow for the addition of new texts and text layers over time. Team members use Google Docs for writing, commenting, and editing project content. Translations can also be authored and reviewed in Docs. When ready, the Document is marked for export on the Sheet. Datafication of project content Documents are exported from Drive as HTML using the Drive API. Using HTML retains formatting and layout. The HTML files are processed to remove the Drive style block and classes (bs4). from bs4 import BeautifulSoup from pathlib import Path html = Path('minimal_editions_workflow.html') soup = BeautifulSoup(html.read_bytes(), \"html.parser\") # remove the Drive style block in <head> soup.head.style.decompose() # for each element, remove the Drive class attributes for tag in soup(): for attribute in [\"class\"]: del tag[attribute] html.write_text(str(soup)) Cleaned HTML files are pushed to a GitHub repository. HTML can be programmatically annotated using a standoff converter; see: https://so.davidlassner.com/ Use the standoff converter with Ancient Greek BERT to mark clause boundaries and to assign span ids in the HTML( text ). This will make it possible to connect spans in translations to similar spans in the originals. We can also add part of speech and morphological analysis data if desired. Commentary can be connected to any span in the HTML (word, phrase, punctuation mark). We could create an application to List the files in the GitHub repository Fetch the HTML and display it in an interface (CKeditor works well with HTML) Allow highlighting of text and addition of commentary Editing and removal of existing annotations Edit the text (given reviewer feedback or other input) Push the updated HTML back to the repository 3. Publishing Workshop on user experience and site design. Create wireframes and craft website design. From site design, create templates and interface for multi-layer texts. For parallel texts to scroll together, we\u2019ll need to listen for scroll and move both columns of text at the same time. On hover of spans will also need to get elements by id to highlight and display commentary in visible text layers. Use build script to gather the HTML files and create a static site folder. Files can also be converted to TEI for preservation and sharing","title":"Minimal Editions Workflow"},{"location":"internationalization/","text":"Internationalization and localization I18N https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language","title":"Internationalization and localization"},{"location":"internationalization/#internationalization-and-localization","text":"I18N https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language","title":"Internationalization and localization"},{"location":"minimal/","text":"minimal computing Minimal computing is a response to commercial systems that \"make the web easy\" by concealing the technologies at work as well as the social and economic consequences of those technologies. It's not an argument that Wix and WordPress are \"bad\" and that you shouldn't use them. It's a way of making things on the web in an informed and deliberate manner. It's a gamble that once you know how the web works, you'll choose to make minimal sites because they are more sustainable, accessible, and personally enriching than other options. Sustainability Content management systems like WordPress run on a server. Each and every time someone asks for information, the server accesses a database, builds the page, and sends it back to the user. To do that, the server has to be left running day and night waiting for requests.These dedicated servers consume significant amounts energy, as much as 3% of the world's total energy consumption. That is equivalent to the emissions of the entire airline industry (src). Minimal computing approaches do not require a dedicated server. They favor shared resources and the efficient use of computation and connectivity. Your website might just be an HTML file that can be stored amongst other files in a shared space and served to the web. The website's files can be distributed worldwide so that a page loads equally fast in New York, Phnom Penh, or Lagos. Accessibility If you're making a website, you probably have some picture in your mind of how people will use it. People will visit your site to learn, share stories, and have fun. The first user that we have in mind is always ourselves. That's normal. Your site is open to the entire world. You'll have visitors unlike anyone you've ever met. So how can we be sure that they'll have the types of experiences you intend? Minimal computing is highly global in its approach to accessibility. Can users navigate your site using a phone or screen reader? If you add images or videos to your site, will that increase the user's cost of loading the page? Could your site be shared on a thumb drive in areas without internet access? As you write content, consider terms that might seem self-evident to you but not to a global audience (more). Making minimal sites offers an opportunity to consider how own experiences with web technologies inform assumptions that often pose barriers to access and communication. Community Wix, WebFlow and other tools provide convenient ways to create web content, but they perpetuate the idea that you need them to make a website. They lock you into their services and the capabilities of their tools. But you are fully capable of making a site on your own and to join the community of people who create and maintain the web. There are millions of people around the world working together, sharing ideas and learning together. Making minimal sites opens the door to new skills and a new way of looking at the world wide web.","title":"minimal computing"},{"location":"minimal/#minimal-computing","text":"Minimal computing is a response to commercial systems that \"make the web easy\" by concealing the technologies at work as well as the social and economic consequences of those technologies. It's not an argument that Wix and WordPress are \"bad\" and that you shouldn't use them. It's a way of making things on the web in an informed and deliberate manner. It's a gamble that once you know how the web works, you'll choose to make minimal sites because they are more sustainable, accessible, and personally enriching than other options. Sustainability Content management systems like WordPress run on a server. Each and every time someone asks for information, the server accesses a database, builds the page, and sends it back to the user. To do that, the server has to be left running day and night waiting for requests.These dedicated servers consume significant amounts energy, as much as 3% of the world's total energy consumption. That is equivalent to the emissions of the entire airline industry (src). Minimal computing approaches do not require a dedicated server. They favor shared resources and the efficient use of computation and connectivity. Your website might just be an HTML file that can be stored amongst other files in a shared space and served to the web. The website's files can be distributed worldwide so that a page loads equally fast in New York, Phnom Penh, or Lagos. Accessibility If you're making a website, you probably have some picture in your mind of how people will use it. People will visit your site to learn, share stories, and have fun. The first user that we have in mind is always ourselves. That's normal. Your site is open to the entire world. You'll have visitors unlike anyone you've ever met. So how can we be sure that they'll have the types of experiences you intend? Minimal computing is highly global in its approach to accessibility. Can users navigate your site using a phone or screen reader? If you add images or videos to your site, will that increase the user's cost of loading the page? Could your site be shared on a thumb drive in areas without internet access? As you write content, consider terms that might seem self-evident to you but not to a global audience (more). Making minimal sites offers an opportunity to consider how own experiences with web technologies inform assumptions that often pose barriers to access and communication. Community Wix, WebFlow and other tools provide convenient ways to create web content, but they perpetuate the idea that you need them to make a website. They lock you into their services and the capabilities of their tools. But you are fully capable of making a site on your own and to join the community of people who create and maintain the web. There are millions of people around the world working together, sharing ideas and learning together. Making minimal sites opens the door to new skills and a new way of looking at the world wide web.","title":"minimal computing"},{"location":"project-types/","text":"common project types What is a project? Not a single-semester assignment or consultation Builds a community around an idea or problem. Fits a familiar genre / is something we can/want to support We need to be brought in early to provide support Types of projects mapping location-based tour application interactive web map story-map (any variety) exhibits thematic image/media/artefact collections showcases (project or otherwise) \"digital archive\" document portal/repository with web or other public-facing interface internally-facing CMS collaborative research collections (unsure if this is what you meant) collective drafting/editing workspaces digital editions publications community-engaged all of the above examples plus involvement of external stakeholders in any capacity incl. access, creation, collection, review, project management, permissions, labor, funding side-by-side translations","title":"common project types"},{"location":"project-types/#common-project-types","text":"","title":"common project types"},{"location":"project-types/#what-is-a-project","text":"Not a single-semester assignment or consultation Builds a community around an idea or problem. Fits a familiar genre / is something we can/want to support We need to be brought in early to provide support","title":"What is a project?"},{"location":"project-types/#types-of-projects","text":"mapping location-based tour application interactive web map story-map (any variety) exhibits thematic image/media/artefact collections showcases (project or otherwise) \"digital archive\" document portal/repository with web or other public-facing interface internally-facing CMS collaborative research collections (unsure if this is what you meant) collective drafting/editing workspaces digital editions publications community-engaged all of the above examples plus involvement of external stakeholders in any capacity incl. access, creation, collection, review, project management, permissions, labor, funding side-by-side translations","title":"Types of projects"},{"location":"research/","text":"research The Fashion Week Debate: Pr\u00eat \u00e0 porter versus Bespoke It's 1999 at Paris fashion week. Models, designers, and industry hotshots gather to work, mingle, and prove who's best dressed. Kitty is an up-and-coming designer known for her unique way with colors and use of household objects. The Mugatu syndicate has an established brand and extensive line of pr\u00eat \u00e0 porter dresses marked with their iconic symbol -- the fleur capri. Customers love the Mugatu brand, its durability, and its simplicity. Some customers have complained about its one-size-fits-all approach, but the brand is so ubiquitous it has become the very definition of \"high fashion.\" Kitty is successful because she listens closely and builds partnerships with her models. In extensive imagining sessions (many involving peyote), Kitty and her community of makers generate blistering dreamscapes and original modes of cloth-crafting. The outcomes are beyond bespoke. Their designs are innovative, boundary-breaking, and out of this world. Kitty's ideas are all astounding, but only a few of them can be worn and even fewer will keep you warm. Following a few snarky exchanges and high jinks, Kitty finds herself standing next to Mugatu. The great tailor turns to both of them with a challenge: \"why should people wear your clothes?\" Mugatu starts off: \"Our ready-to-wear sacks will fit anyone. The fleur shows that you are a fashion beacon like all others.\" Kitty: \"That's the problem. You sell a manufactured idea of originality to conformists who know nothing about fashion or themselves. They buy your logo because they don't want to think. Because you say what's fashionable, we never dream of being anything more than your users. We mould our world to fit the pr\u00eat \u00e0 porter.\" Mugatu: \"And you, my little friend, prey on hipsters. Who cares if you're the only one wearing a hydrangea-themed women's kilt? You live off narcissism and the myth that different is better. Our sacks get the job done with sass enough.\" Great Tailor: \"There's no such thing a woman's kilt. But maybe that's the point. At least Kitty's bad idea is provocative. All your bags look the same. Your sack is just a general solution to a common problem -- entropy.\" Mugatu: \"But, you must admit, much of the time, you just need something to wear or you'd get cold. Kitty's 'thread commune,' to save threads from the opression of weaving, is just a box full of yarn and thread. Try wearing that!\" Kitty: \"We are the masks we present to the world. Why choose to wear a blank face with no emotion? Better to thrive and inspire than just sell dresses.\" Great Tailor: \"You have both made strong arguments. Mugatu's bags are practical and keep us warm. Entropy is clearly a problem. But Kitty's kilts are fun. I remember seeing her clothes. I tell my friends about them. They bring me joy. Accepted wisdom says that I can't be unique every day. Most of the time I'm just keeping warm and getting by. Most days, a sack over my torso is exactly what I need. Every day can't be my special day. But if I don't take this moment to be something special, when will I ever make the time? And if I only get dressed up for special occasions, all the other days boring. Must I really decide that some days are boring, but other days, for whatever reason are special?\" Mugatu: \"I'll be honest with you. I wasn't listening to you just now. But I have an answer to your question. Most people, most of the time, just want a bag to keep warm. So give that to them. Often enough, the bag won't fit, or it won't be warm. That's when you experiment. As the sages say: 'We're not a skunk works.' We need to be strategic about research and development.\" Kitty: \"But don't they also say that every project should try at least one new thing. Sometimes it's something new to us. Other times it's something that's never been done before. We can't just wait to do new things. We have to make space for it in everything we do.\" Mugatu: \"That sounds strategic to me. You are truly a wise designer. Maybe someday you'll join us off the rack. Until then, get out of my way!\"","title":"research"},{"location":"research/#research","text":"","title":"research"},{"location":"research/#the-fashion-week-debate-pret-a-porter-versus-bespoke","text":"It's 1999 at Paris fashion week. Models, designers, and industry hotshots gather to work, mingle, and prove who's best dressed. Kitty is an up-and-coming designer known for her unique way with colors and use of household objects. The Mugatu syndicate has an established brand and extensive line of pr\u00eat \u00e0 porter dresses marked with their iconic symbol -- the fleur capri. Customers love the Mugatu brand, its durability, and its simplicity. Some customers have complained about its one-size-fits-all approach, but the brand is so ubiquitous it has become the very definition of \"high fashion.\" Kitty is successful because she listens closely and builds partnerships with her models. In extensive imagining sessions (many involving peyote), Kitty and her community of makers generate blistering dreamscapes and original modes of cloth-crafting. The outcomes are beyond bespoke. Their designs are innovative, boundary-breaking, and out of this world. Kitty's ideas are all astounding, but only a few of them can be worn and even fewer will keep you warm. Following a few snarky exchanges and high jinks, Kitty finds herself standing next to Mugatu. The great tailor turns to both of them with a challenge: \"why should people wear your clothes?\" Mugatu starts off: \"Our ready-to-wear sacks will fit anyone. The fleur shows that you are a fashion beacon like all others.\" Kitty: \"That's the problem. You sell a manufactured idea of originality to conformists who know nothing about fashion or themselves. They buy your logo because they don't want to think. Because you say what's fashionable, we never dream of being anything more than your users. We mould our world to fit the pr\u00eat \u00e0 porter.\" Mugatu: \"And you, my little friend, prey on hipsters. Who cares if you're the only one wearing a hydrangea-themed women's kilt? You live off narcissism and the myth that different is better. Our sacks get the job done with sass enough.\" Great Tailor: \"There's no such thing a woman's kilt. But maybe that's the point. At least Kitty's bad idea is provocative. All your bags look the same. Your sack is just a general solution to a common problem -- entropy.\" Mugatu: \"But, you must admit, much of the time, you just need something to wear or you'd get cold. Kitty's 'thread commune,' to save threads from the opression of weaving, is just a box full of yarn and thread. Try wearing that!\" Kitty: \"We are the masks we present to the world. Why choose to wear a blank face with no emotion? Better to thrive and inspire than just sell dresses.\" Great Tailor: \"You have both made strong arguments. Mugatu's bags are practical and keep us warm. Entropy is clearly a problem. But Kitty's kilts are fun. I remember seeing her clothes. I tell my friends about them. They bring me joy. Accepted wisdom says that I can't be unique every day. Most of the time I'm just keeping warm and getting by. Most days, a sack over my torso is exactly what I need. Every day can't be my special day. But if I don't take this moment to be something special, when will I ever make the time? And if I only get dressed up for special occasions, all the other days boring. Must I really decide that some days are boring, but other days, for whatever reason are special?\" Mugatu: \"I'll be honest with you. I wasn't listening to you just now. But I have an answer to your question. Most people, most of the time, just want a bag to keep warm. So give that to them. Often enough, the bag won't fit, or it won't be warm. That's when you experiment. As the sages say: 'We're not a skunk works.' We need to be strategic about research and development.\" Kitty: \"But don't they also say that every project should try at least one new thing. Sometimes it's something new to us. Other times it's something that's never been done before. We can't just wait to do new things. We have to make space for it in everything we do.\" Mugatu: \"That sounds strategic to me. You are truly a wise designer. Maybe someday you'll join us off the rack. Until then, get out of my way!\"","title":"The Fashion Week Debate: Pr\u00eat \u00e0 porter versus Bespoke"},{"location":"search/","text":"Search PageFind Lunr Solr Elastic","title":"Search"},{"location":"search/#search","text":"PageFind Lunr Solr Elastic","title":"Search"},{"location":"serverless/","text":"Serverless static It is possible to create an A record pointing to an S3 bucket. but problem with SSL certs https://www.serverlessops.io/blog/static-websites-on-aws-s3-with-serverless-framework","title":"Serverless static"},{"location":"serverless/#serverless-static","text":"It is possible to create an A record pointing to an S3 bucket. but problem with SSL certs https://www.serverlessops.io/blog/static-websites-on-aws-s3-with-serverless-framework","title":"Serverless static"},{"location":"stages/","text":"project stages Planning The process begins with the RDDS project form identify internal stakeholders including subject librarians and global collections identify comparable projects, site designs we/they like other reference points ux design workshop to establish user problems and needs, prioritize use cases and features (scope), define successful outcomes and goals grants, identify relevant grants and needs. Wireframing and data models Assess best solutions and technologies to use given project requirements, people and goals. Is this a project that RDDS can or should support? Does it match our values as a team? Provide opportunities to inovate and explore? Planning ends with a completed project charter documenting everything above Development Development begins with a project manager and regular project team check-ins Project team training and capacity building. Basically projects offer professional development and mentoring opportunities as well as work in existing areas of expertise for all project partners. content creation and editing Dev work leading to minimal viable product, with opportunities for pair-programming, sharing and feedback. Documentation should be sufficent to guide new participants Testing for RDDS priorities: visible citation of project partners, accessibility, inclusive language, access to data, RDDS visual identity and TBD. Development ends when an Alpha version of the project is complete. It is a complete first draft of the project. Development ends when the project team agrees that the project is ready to share with external users. Deployment Deployment begins with the Beta version of the project and the publishing of project applications, software and data. At this point, all applications and web content should be \"flattened\" to static sites. If possible, project data should be published as a dataset User testing and feedback Creation of a project sustainability plan (see https://sites.haa.pitt.edu/sustainabilityroadmap/) Deployment ends with a production version of the project Closeout Closeout begins with ??? Stakeholders, project manager, and all team members meet to reflect on the project to help inform planning and development of future projects as well as current project maintenance. Assessment of goals, resources, process, and documentation (see https://dhlab.yale.edu/assets/docs/Project-Close.pdf) Articulation of action items based on closeout results (like: do we need different equipment? do we need to build in a longer timeline next time?) Maintenance (3-year cycle) Versioned updates of content and data versioned DOIs Support for communications and promotion, conference presentations, workshops Grant reporting and whitepapers Preservation planning to archive data and project outcomes","title":"project stages"},{"location":"stages/#project-stages","text":"Planning The process begins with the RDDS project form identify internal stakeholders including subject librarians and global collections identify comparable projects, site designs we/they like other reference points ux design workshop to establish user problems and needs, prioritize use cases and features (scope), define successful outcomes and goals grants, identify relevant grants and needs. Wireframing and data models Assess best solutions and technologies to use given project requirements, people and goals. Is this a project that RDDS can or should support? Does it match our values as a team? Provide opportunities to inovate and explore? Planning ends with a completed project charter documenting everything above Development Development begins with a project manager and regular project team check-ins Project team training and capacity building. Basically projects offer professional development and mentoring opportunities as well as work in existing areas of expertise for all project partners. content creation and editing Dev work leading to minimal viable product, with opportunities for pair-programming, sharing and feedback. Documentation should be sufficent to guide new participants Testing for RDDS priorities: visible citation of project partners, accessibility, inclusive language, access to data, RDDS visual identity and TBD. Development ends when an Alpha version of the project is complete. It is a complete first draft of the project. Development ends when the project team agrees that the project is ready to share with external users. Deployment Deployment begins with the Beta version of the project and the publishing of project applications, software and data. At this point, all applications and web content should be \"flattened\" to static sites. If possible, project data should be published as a dataset User testing and feedback Creation of a project sustainability plan (see https://sites.haa.pitt.edu/sustainabilityroadmap/) Deployment ends with a production version of the project Closeout Closeout begins with ??? Stakeholders, project manager, and all team members meet to reflect on the project to help inform planning and development of future projects as well as current project maintenance. Assessment of goals, resources, process, and documentation (see https://dhlab.yale.edu/assets/docs/Project-Close.pdf) Articulation of action items based on closeout results (like: do we need different equipment? do we need to build in a longer timeline next time?) Maintenance (3-year cycle) Versioned updates of content and data versioned DOIs Support for communications and promotion, conference presentations, workshops Grant reporting and whitepapers Preservation planning to archive data and project outcomes","title":"project stages"},{"location":"training/","text":"Training Root technologies Rather than adopting specific solutions or frameworks, we choose to focus on core technologies. This approach facilitates the sharing of ideas and experience across projects and cross-project collaboration. It fosters re-use of solutions and experience. It makes it easier for team members to move between projects. HTML CSS Customization of CSS rules is the simplest way to make our projects distinct and match our graphic identity. JavaScript JS is our preferred scripting language for projects. Python Python numerical calculations, data analytics, databases, spatial analysis, web scraping We have/can have Python installed on our computers. We can also create notebooks (.ipynb) to share step-by-step iterative lessons, projects, and code examples. We can share notebooks, and optionally make them easily accessible by using tools like JupyterLite distribution that eliminate a need for account creation, install, or individual configuration. R Skills In order for the project stages process to work, we need to maintain the capacity to support each step in the pipeline. Otherwise things get stuck and work piles up. These are common capacities that each person in the DS team needs to have: User Experience: The ability to run a workshop to help project partners establish the primary goals of the project, the audience and outcomes of the project. Wire Framing: The ability to work with project partners to create wireframes using paper and other tools such as Figma. Site Design: Sufficent understanding of HTML and CSS to customize existing themes and templates. Git/GitHub: Proficientcy in using GitHub to update project code, manage projects and record issues. Familiarity with GitHub Actions and Pages is also helpful. 11ty and Jekyll: Basic understanding of how static site generators work, how to configure them and update content in markdown. Netlify: A conceptual awareness of static sites, versioned builds, HTTPS, Netlify CMS.","title":"Training"},{"location":"training/#training","text":"","title":"Training"},{"location":"training/#root-technologies","text":"Rather than adopting specific solutions or frameworks, we choose to focus on core technologies. This approach facilitates the sharing of ideas and experience across projects and cross-project collaboration. It fosters re-use of solutions and experience. It makes it easier for team members to move between projects.","title":"Root technologies"},{"location":"training/#html","text":"","title":"HTML"},{"location":"training/#css","text":"Customization of CSS rules is the simplest way to make our projects distinct and match our graphic identity.","title":"CSS"},{"location":"training/#javascript","text":"JS is our preferred scripting language for projects.","title":"JavaScript"},{"location":"training/#python","text":"Python numerical calculations, data analytics, databases, spatial analysis, web scraping We have/can have Python installed on our computers. We can also create notebooks (.ipynb) to share step-by-step iterative lessons, projects, and code examples. We can share notebooks, and optionally make them easily accessible by using tools like JupyterLite distribution that eliminate a need for account creation, install, or individual configuration.","title":"Python"},{"location":"training/#r","text":"","title":"R"},{"location":"training/#skills","text":"In order for the project stages process to work, we need to maintain the capacity to support each step in the pipeline. Otherwise things get stuck and work piles up. These are common capacities that each person in the DS team needs to have: User Experience: The ability to run a workshop to help project partners establish the primary goals of the project, the audience and outcomes of the project. Wire Framing: The ability to work with project partners to create wireframes using paper and other tools such as Figma. Site Design: Sufficent understanding of HTML and CSS to customize existing themes and templates. Git/GitHub: Proficientcy in using GitHub to update project code, manage projects and record issues. Familiarity with GitHub Actions and Pages is also helpful. 11ty and Jekyll: Basic understanding of how static site generators work, how to configure them and update content in markdown. Netlify: A conceptual awareness of static sites, versioned builds, HTTPS, Netlify CMS.","title":"Skills"},{"location":"values/","text":"values minimal - start simple to be sustainable, accessible, and global creative - hold space for odd ideas and new inputs communal - make for/with community and people's needs ephemeral - permanent isn't possible; let's revisit every three years centered - build from us, not in response to others fun - if we don't like it, it won't get done Our values of colleagues - Can always ask for explainations and terminology - No open-ended questions or commitments - It's always ok to push back when you don\u2019t have time or not the best person for a task","title":"values"},{"location":"values/#values","text":"minimal - start simple to be sustainable, accessible, and global creative - hold space for odd ideas and new inputs communal - make for/with community and people's needs ephemeral - permanent isn't possible; let's revisit every three years centered - build from us, not in response to others fun - if we don't like it, it won't get done Our values of colleagues - Can always ask for explainations and terminology - No open-ended questions or commitments - It's always ok to push back when you don\u2019t have time or not the best person for a task","title":"values"}]}